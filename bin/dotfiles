#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
BIN_DIR=$(dirname "${BASH_SOURCE[0]}")
ROOT_DIR=$(dirname "$(builtin cd "$BIN_DIR" && pwd)")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2
STRIPPED_SUB_COMMAND_NAME="${SUB_COMMAND_NAME#--}"

export DOTFILES_DIR="$ROOT_DIR"
export XDG_CONFIG_HOME="$HOME/.config"
export STOW_DIR="$DOTFILES_DIR"
export ACCEPT_EULA=Y
HOMEBREW_PREFIX=$("$DOTFILES_DIR"/bin/is-supported "$DOTFILES_DIR"/bin/is-apple-silicon /opt/homebrew /usr/local)
PATH="$HOMEBREW_PREFIX/bin:$DOTFILES_DIR/bin:$PATH"

source "$ROOT_DIR/scripts/echos.sh"
source "$ROOT_DIR/scripts/requirers.sh"

sub_help() {
  echo -e "\nUsage: $BIN_NAME <command>"
  echo
  echo "Commands:"
  echo "   clean            Clean up caches (brew, nvm, gem)"
  echo "   configure        Configure system (defaults, dock)"
  echo "   edit             Open dotfiles in IDE ($DOTFILES_IDE)"
  echo "   help             This help message"
  echo "   install          Bootstrap system"
  echo "   link             Link dotfiles to ~/"
  echo "   open             Open dotfiles in Finder"
  echo "   unlink           Restore dotfiles from ~/.dotfiles_backup"
  echo "   update           Update dotfiles (submodules)"
}

sub_install_help() {
  echo -e "\nUsage: $BIN_NAME install <command>"
  echo
  echo "Commands:"
  echo "   --all              Run all below commands"
  echo "   --fonts            Local fonts"
  echo "   --help             This help message"
  echo "   --hosts            Ad-blocking hosts file from StevenBlack project"
  echo "   --launchagents     Install LaunchAgents (mackup auto-backup)"
  echo "   --packages         3rd party packages and extensions (brew, cask, code, npm)"
  echo "   --passwordless     Run sudo without password"
  echo "   --prezto           Zsh framework"
  echo "   --ssh              SSH Key"
}

sub_configure_help() {
  echo -e "\nUsage: $BIN_NAME configure <command>"
  echo
  echo "Commands:"
  echo "   --defaults         Apply macOS system defaults"
  echo "   --dock             Apply macOS Dock settings"
  echo "   --help             This help message"
}

sub_update_help() {
  echo -e "\nUsage: $BIN_NAME update <command>"
  echo
  echo "Commands:"
  echo "   --system           Update packages and pkg managers (OS, brew, npm, gem)"
  echo "   --help             This help message"
}

sub_install() {
  bot "Hi! I'm going to install tooling and tweak your system settings. Here I go..."

  grep -q 'NOPASSWD:     ALL' /etc/sudoers.d/$LOGNAME >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "no suder file"
    sudo -v

    while true; do
      sudo -n true
      sleep 60
      kill -0 "$$" || exit
    done 2>/dev/null &

    $0 install --passwordless
  fi

  $0 install --ssh

  bot "ensuring build/install tools are available"
  if ! xcode-select --print-path &>/dev/null; then
    xcode-select --install &>/dev/null

    until xcode-select --print-path &>/dev/null; do
      sleep 5
    done

    print_result $? ' XCode Command Line Tools Installed'

    sudo xcodebuild -license
    print_result $? 'Agree with the XCode Command Line Tools licence'

  fi

  running "checking homebrew..."
  if ! command-exists brew; then
    action "installing homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if [[ $? != 0 ]]; then
      error "unable to install homebrew, script $0 abort!"
      exit 2
    fi
    source_brew
    brew analytics off
  else
    ok
    bot "Homebrew"
    read -r -p "run brew update && upgrade? [y|N] " response
    if [[ $response =~ (y|yes|Y) ]]; then
      action "updating homebrew..."
      source_brew
      brew update
      ok "homebrew updated"
      action "upgrading brew packages..."
      brew upgrade
      ok "brews upgraded"
    else
      skip "skipped brew package upgrades."
    fi
  fi

  mkdir -p "$HOME"/Library/Caches/Homebrew/Formula
  brew doctor

  action "installing stow..."
  require_brew stow

  action "installing fnm..."
  require_brew fnm
  ok

  action "installing lts node..."
  require_fnm lts-latest
  fnm default lts-latest
  ok

  bot "Woot. All done!. You should run the complementary commands to have your machine fully configured and ready to use:\n"
  echo "$BIN_NAME install hosts"
  echo "$BIN_NAME install prezto"
  echo "$BIN_NAME link (This should be run after prezto)"
  echo "$BIN_NAME install vim"
  echo "$BIN_NAME install fonts"
  echo "$BIN_NAME install packages"
  echo "$BIN_NAME install launchagents"
  echo "$BIN_NAME configure defaults"
  echo -e "$BIN_NAME configure dock\n"

  read -r -p "Should i run them for you? [y|N] " response
  if [[ $response =~ (yes|y|Y) ]]; then
    $0 install --all
  fi

  open /Applications/Warp.app
  killall "Terminal" >/dev/null 2>&1
}

sub_install_all() {
  $0 install --hosts
  $0 install --prezto
  $0 link
  $0 install --vim
  $0 install --fonts
  $0 install --packages
  $0 install --launchagents
  $0 configure
}

sub_install_passwordless() {
  echo -e "Do you want me to setup this machine to allow you to run sudo without a password?\nPlease read here to see what I am doing:\nhttp://wiki.summercode.com/sudo_without_a_password_in_mac_os_x \n"

  read -r -p "Make sudo passwordless? [y|N] " response

  if [[ $response =~ (yes|y|Y) ]]; then
    if ! grep -q "#includedir /private/etc/sudoers.d" /etc/sudoers; then
      echo '#includedir /private/etc/sudoers.d' | sudo tee -a /etc/sudoers >/dev/null
    fi
    echo -e "Defaults:$LOGNAME    !requiretty\n$LOGNAME ALL=(ALL) NOPASSWD:     ALL" | sudo tee /etc/sudoers.d/$LOGNAME
    bot "You can now run sudo commands without password!"
  fi
}

sub_install_ssh() {
  bot "Setting up SSH\n"

  if [[ -f "$HOME/.ssh/id_ed25519" ]]; then
    read -r -p "Looks like an SSH is already generated. Should i generate a new key nontheless? [y|N] " response
  else
    response='yes'
  fi

  if [[ $response =~ (yes|y|Y) ]]; then
    rm -rf "$HOME/.ssh/id_ed25519"
    rm -rf "$HOME/.ssh/id_ed25519.pub"
    action "Generating a new SSH key"
    read -r -p "Please enter an email to associate your ssh key: " ssh_email
    ssh-keygen -t ed25519 -C $ssh_email -f "$HOME/.ssh/id_ed25519"
    ok
  else
    skip
  fi

  action "Adding SSH key to SSH Agent"
  eval "$(ssh-agent -s)"
  touch "$HOME/.ssh/config"
  echo -e "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_ed25519" | tee "$HOME/.ssh/config"
  ssh-add -K "$HOME/.ssh/id_ed25519"
  ok

  echo -e "\nNote: You should add your SSH key to your github account by first running:\n"
  echo -e "pbcopy < ~/.ssh/id_ed25519.pub\n"
  echo -e "Then follow the guide below:\n\nhttps://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account \n"

  read -r -p "Press [ENTER] to continue... "
}

sub_install_prezto() {
  bot "Prezto Setup\n"
  read -r -p "Install prezto zsh? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "installing pretzo-zsh"
    zsh "$ROOT_DIR/scripts/install_prezto.zsh"
    ok
  else
    skip
  fi
}

sub_install_hosts() {
  bot "Hosts file install\n"
  read -r -p "Overwrite /etc/hosts using the StevenBlack hosts project? (optional local entries from ./configs/hosts.local) [y|N] " response
  if [[ $response =~ (yes|y|Y) ]]; then
    pushd "$ROOT_DIR" >/dev/null 2>&1 || exit
    action "cp /etc/hosts /etc/hosts.backup"
    sudo cp /etc/hosts /etc/hosts.backup
    ok
    action "update stevenblack-hosts repo"
    git submodule update --init modules/stevenblack-hosts
    (cd modules/stevenblack-hosts && git pull origin master)
    ok
    if [ -f ./system/hosts.local ]; then
      action "copy ./system/hosts.local to ./modules/stevenblack-hosts/myhosts"
      cp ./system/hosts.local ./modules/stevenblack-hosts/myhosts
      ok
    fi
    if [ -f ./system/hosts.whitelist ]; then
      action "copy ./system/hosts.whitelist to ./modules/stevenblack-hosts/whitelist"
      cp ./system/hosts.whitelist ./modules/stevenblack-hosts/whitelist
      ok
    fi
    action "checking python3 and pip3"
    if ! command -v python3 >/dev/null 2>&1; then
      require_brew python
    fi
    if ! command -v pip3 >/dev/null 2>&1; then
      curl -fsSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
      sudo python3 get-pip.py
      rm get-pip.py
    fi
    action "installing python dependencies from stevenblack-hosts requirements.txt"
    # Create a virtual environment for stevenblack-hosts
    python3 -m venv modules/stevenblack-hosts/venv
    source modules/stevenblack-hosts/venv/bin/activate
    pip install -r modules/stevenblack-hosts/requirements.txt
    deactivate
    action "python ./modules/stevenblack-hosts/updateHostsFile.py --auto --replace"
    source modules/stevenblack-hosts/venv/bin/activate
    (cd modules/stevenblack-hosts && python updateHostsFile.py --auto --replace)
    deactivate
    (cd modules/stevenblack-hosts && git reset --hard HEAD >/dev/null 2>&1)
    ok
    bot "Your /etc/hosts file has been updated. Last version is saved in /etc/hosts.backup"
    popd >/dev/null 2>&1 || exit
  else
    skip
  fi
}

sub_install_fonts() {
  bot "Fonts install\n"
  read -r -p "Install local fonts? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "installing local fonts"
    require_tap homebrew/cask-fonts
    require_brew fontconfig
    "$ROOT_DIR/fonts/install.sh"
    ok
  else
    skip
  fi
}

install_packages() {
  local list_file=$1
  local install_cmd=$2
  local name=$3

  if [[ ! -f "packages/$list_file" ]]; then
    action "skipping $name (packages/$list_file not found)"
    return
  fi

  # Check if file has any non-comment, non-empty lines
  if ! grep -v '^[[:space:]]*#' "packages/$list_file" | grep -v '^[[:space:]]*$' >/dev/null 2>&1; then
    action "skipping $name (no packages defined)"
    return
  fi

  read -r -p "Do you want to install $name? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "installing $name"
    while IFS= read -r package || [[ -n "$package" ]]; do
      # Skip comments and empty lines
      [[ $package =~ ^[[:space:]]*# ]] && continue
      [[ -z "${package// /}" ]] && continue

      $install_cmd "$package"
    done <"packages/$list_file"
  else
    action "skipping $name installation"
  fi
}

sub_install_packages() {
  bot "Packages install\n"
  read -r -p "Install packages/tools/apps? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    pushd "$ROOT_DIR" >/dev/null 2>&1 || exit

    install_packages "tap.list" "require_tap" "Homebrew taps"
    install_packages "brew.list" "require_brew" "Homebrew utilities"
    install_packages "cask.list" "require_cask" "Homebrew desktop apps"
    install_packages "npm.list" "require_npm" "NPM global packages"
    install_packages "mas.list" "require_mas" "Mac App Store apps"
    install_packages "code.list" "require_code" "VS Code extensions"

    running "cleanup homebrew"
    brew cleanup --force >/dev/null 2>&1
    rm -f -r /Library/Caches/Homebrew/* >/dev/null 2>&1
    xattr -d -r com.apple.quarantine "$HOME/Library/QuickLook"
    popd >/dev/null 2>&1 || exit
    ok
  else
    skip
  fi
}

sub_install_vim() {
  bot "VIM Setup\n"
  read -r -p "Do you want to install vim plugins? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "Installing vim plugins"
    vim +PluginInstall +qall >/dev/null 2>&1
    ok
  else
    skip
  fi
}

sub_install_launchagents() {
  bot "LaunchAgents Setup\n"
  read -r -p "Do you want to install LaunchAgents (mackup auto-backup)? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    bot "Installing LaunchAgents..."
    mkdir -p ~/Library/LaunchAgents
    for plist in "$DOTFILES_DIR"/launchagents/*.plist; do
      if [ -f "$plist" ]; then
        plist_name=$(basename "$plist")
        ln -sf "$plist" ~/Library/LaunchAgents/
        launchctl unload ~/Library/LaunchAgents/"$plist_name" 2>/dev/null || true
        launchctl load ~/Library/LaunchAgents/"$plist_name"
        ok "Loaded $plist_name"
      fi
    done
  fi
}

sub_configure() {
  read -r -p "Do you want to update the system configurations? [y|N] " response
  if [[ -z $response || $response =~ ^(y|Y) ]]; then
    echo
    $0 configure --system
    $0 configure --dock
  else
    skip
  fi
}

sub_configure_defaults() {
  bot "OS Configuration\n"

  read -r -p "Do you want to update the system defaults? [y|N] " response
  if [[ -z $response || $response =~ ^(y|Y) ]]; then
    shopt -s nullglob

    for DEFAULTS_FILE in "$DOTFILES_DIR"/macos/defaults*.sh; do
      . "$DEFAULTS_FILE"
    done

    bot "Note: that some of these changes require a logout/restart to take effect."
  else
    skip
  fi

}

sub_configure_dock() {
  bot "Dock Configuration\n"

  read -r -p "Do you want to update the dock configuration? [y|N] " response
  if [[ -z $response || $response =~ ^(y|Y) ]]; then
    . "$DOTFILES_DIR/macos/dock.sh"

    ok "Dock reloaded!"
  else
    skip
  fi
}

sub_link() {
  bot "Dotfiles Setup\n"
  read -r -p "symlink ../runcom/* and ../config/* files in ~/ ? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "creating symlinks for project dotfiles..."
    now=$(date +"%Y.%m.%d.%H.%M.%S")

    pushd "$ROOT_DIR"/runcom >/dev/null 2>&1 || exit

    for file in .*; do
      if [[ $file == "." || $file == ".." || $file == '.DS_Store' ]]; then
        continue
      fi

      if [[ -e "$HOME/$file" ]]; then
        running "$HOME/$file"
        mkdir -p "$HOME/.dotfiles_backup/$now"
        mv "$HOME/$file" "$HOME/.dotfiles_backup/$now/$file"
        echo "backup saved as $HOME/.dotfiles_backup/$now/$file"
      fi

      unlink "$HOME/$file" >/dev/null 2>&1
    done

    popd >/dev/null 2>&1 || exit
    pushd "$ROOT_DIR" >/dev/null 2>&1 || exit

    [[ -d "$XDG_CONFIG_HOME" ]] || mkdir -p "$XDG_CONFIG_HOME"
    stow -t "$HOME" runcom
    stow -t "$XDG_CONFIG_HOME" config
    mkdir -p "$HOME/.local/runtime"
    chmod 700 "$HOME/.local/runtime"

    popd >/dev/null 2>&1 || exit
  else
    skip
  fi
}

sub_unlink() {
  bot "Dotfiles Restore\n"
  if [[ -z $1 ]]; then
    error "you need to specify a backup folder date. Take a look in ~/.dotfiles_backup/ to see which backup date you wish to restore."
    exit 1
  fi

  pushd "$HOME/.dotfiles_backup/$1" >/dev/null 2>&1 || exit

  for file in .*; do
    if [[ $file == "." || $file == ".." || $file == '.DS_Store' ]]; then
      continue
    fi

    running "$HOME/$file"
    if [[ -e ~/$file ]]; then
      unlink "$file"
      echo -en "project dotfile $file unlinked"
      ok
    fi

    if [[ -e ./$file ]]; then
      mv "./$file" ./
      echo -en "$1 backup restored"
      ok
    fi
    echo -en '\tdone'
    ok
  done

  popd >/dev/null 2>&1 || exit
  pushd "$ROOT_DIR" >/dev/null 2>&1 || exit

  stow --delete -t "$HOME" runcom
  stow --delete -t "$XDG_CONFIG_HOME" config

  popd >/dev/null 2>&1 || exit
}

sub_update() {
  bot "Updating Dotfiles to latest and greatest!\n"

  pushd "$ROOT_DIR" >/dev/null 2>&1 || exit

  running "Enter commit message"
  read -r message
  echo

  running "Updating submodules"
  git submodule sync --recursive --quiet >/dev/null 2>&1
  git submodule init --recursive --quiet >/dev/null 2>&1
  git submodule update --remote --recursive --checkout --quiet >/dev/null 2>&1
  ok

  running "Updating remote repo"
  git add -A >/dev/null 2>&1
  git commit -m "$message" >/dev/null 2>&1
  git push origin main --quiet >/dev/null 2>&1
  ok

  running "Saving date of update"
  git config --global dotfiles.lastupdate "$(date "+%F %T")" >/dev/null 2>&1
  ok

  popd >/dev/null 2>&1 || exit

  bot "Woot! All done."
}

sub_update_system() {
  bot "Dedusting this old rusty piece of machinery!"

  action "Updating macOS"
  sudo softwareupdate -i -a

  action "Updating homebrew"
  brew update

  action "Upgrading homebrew packages"
  brew upgrade

  action "Upgrading app store apps"
  mas upgrade

  action "Updating npm"
  source_fnm
  npm install npm -g
  npm update -g

  bot "Woot! All done. You should clean your system from any leftovers files by running:\n\n"
  echo -e "$BIN_NAME clean\n\n"

  read -r -p "Should i clean them for you? [y|N] " response
  if [[ $response =~ (yes|y|Y) ]]; then
    $0 clean
  fi
}

sub_clean() {
  bot "Polishing this old rusty piece of machinery!\n"
  brew cleanup
  bot "Woot! All done."
}

sub_open() {
  open "$DOTFILES_DIR"
}

sub_edit() {
  sh -c "$DOTFILES_IDE $DOTFILES_DIR"
}

cmd_error() {
  error "'${COMMAND_NAME}' is not a known command or has errors." >&2
  sub_help
  exit 1
}

subcmd_error() {
  error "${COMMAND_NAME}: '${SUB_COMMAND_NAME}' is not a known command or has errors." >&2
  sub_"${COMMAND_NAME}"_help
  if [ $? = 127 ]; then
    cmd_error
  fi
  exit 1
}

case $COMMAND_NAME in
"" | "help")
  sub_help
  ;;
"unlink")
  shift
  sub_unlink "$@"
  ;;
*)
  if [[ -n $SUB_COMMAND_NAME ]]; then
    case $SUB_COMMAND_NAME in
    --"${STRIPPED_SUB_COMMAND_NAME}")
      sub_${COMMAND_NAME}_${STRIPPED_SUB_COMMAND_NAME}
      if [ $? = 127 ]; then
        subcmd_error
      fi
      ;;
    *)
      subcmd_error
      ;;
    esac
  else
    sub_"${COMMAND_NAME}"
    if [ $? = 127 ]; then
      cmd_error
    fi
  fi
  ;;
esac
