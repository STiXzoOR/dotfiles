#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
BIN_DIR=$(dirname ${BASH_SOURCE[0]})
ROOT_DIR=$(dirname $(builtin cd $BIN_DIR && pwd))
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2
STRIPPED_SUB_COMMAND_NAME="${SUB_COMMAND_NAME#--}"

export DOTFILES_DIR=$ROOT_DIR
export NVM_DIR="$HOME/.nvm"
export XDG_CONFIG_HOME="$HOME/.config"
export STOW_DIR="$DOTFILES_DIR"
export ACCEPT_EULA=Y
PATH="$DOTFILES_DIR/bin:$PATH"

source "$ROOT_DIR/scripts/echos.sh"
source "$ROOT_DIR/scripts/requirers.sh"

sub_help() {
  echo -e "\nUsage: $BIN_NAME <command>"
  echo
  echo "Commands:"
  echo "   clean            Clean up caches (brew, nvm, gem)"
  echo "   configure        Configure system (defaults, dock)"
  echo "   edit             Open dotfiles in IDE ($DOTFILES_IDE)"
  echo "   help             This help message"
  echo "   install          Bootstrap system"
  echo "   link             Link dotfiles to ~/"
  echo "   open             Open dotfiles in Finder"
  echo "   unlink           Restore dotfiles from ~/.dotfiles_backup"
  echo "   update           Update dotfiles (submodules)"
}

sub_install_help() {
  echo -e "\nUsage: $BIN_NAME install <command>"
  echo
  echo "Commands:"
  echo "   --all              Run all below commands"
  echo "   --fonts            Local fonts"
  echo "   --help             This help message"
  echo "   --hosts            Ad-blocking hosts file from someonewhocares.org"
  echo "   --packages         3rd party packages and extensions (brew, cask, code, npm)"
  echo "   --passwordless     Run sudo without password"
  echo "   --prezto           Zsh framework"
  echo "   --ssh              SSH Key"
}

sub_configure_help() {
  echo -e "\nUsage: $BIN_NAME configure <command>"
  echo
  echo "Commands:"
  echo "   --defaults         Apply macOS system defaults"
  echo "   --dock             Apply macOS Dock settings"
  echo "   --help             This help message"
}

sub_update_help() {
  echo -e "\nUsage: $BIN_NAME update <command>"
  echo
  echo "Commands:"
  echo "   --system           Update packages and pkg managers (OS, brew, npm, gem)"
  echo "   --help             This help message"
}

sub_install() {
  bot "Hi! I'm going to install tooling and tweak your system settings. Here I go..."

  grep -q 'NOPASSWD:     ALL' /etc/sudoers.d/$LOGNAME >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "no suder file"
    sudo -v

    while true; do
      sudo -n true
      sleep 60
      kill -0 "$$" || exit
    done 2>/dev/null &

    $0 install passwordless
  fi

  $0 install ssh

  bot "ensuring build/install tools are available"
  if !xcode-select --print-path &>/dev/null; then
    xcode-select --install &>/dev/null

    until xcode-select --print-path &>/dev/null; do
      sleep 5
    done

    ok 'XCode Command Line Tools Installed'

    sudo xcodebuild -license
    ok 'Agree with the XCode Command Line Tools licence'
  fi

  running "checking homebrew..."
  brew_bin=$(which brew) 2>&1 >/dev/null
  if [[ $? != 0 ]]; then
    action "installing homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if [[ $? != 0 ]]; then
      error "unable to install homebrew, script $0 abort!"
      exit 2
    fi
  else
    ok
    bot "Homebrew"
    read -r -p "run brew update && upgrade? [y|N] " response
    if [[ $response =~ (y|yes|Y) ]]; then
      action "updating homebrew..."
      brew update
      ok "homebrew updated"
      action "upgrading brew packages..."
      brew upgrade
      ok "brews upgraded"
    else
      skip "Brew package upgrades"
    fi
  fi

  mkdir -p $HOME/Library/Caches/Homebrew/Formula
  brew analytics off
  brew doctor

  require_brew git
  require_brew zsh
  require_brew stow

  RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl) --with-readline-dir=$(brew --prefix readline) --with-libyaml-dir=$(brew --prefix libyaml)"
  require_brew ruby

  CURRENTSHELL=$(dscl . -read /Users/$USER UserShell | awk '{print $2}')
  if [[ "$CURRENTSHELL" != "/usr/local/bin/zsh" ]]; then
    bot "setting newer homebrew zsh (/usr/local/bin/zsh) as your shell (password required)"
    sudo dscl . -change /Users/$USER UserShell $SHELL /usr/local/bin/zsh >/dev/null 2>&1
    ok
  fi

  action "installing nvm..."
  install_nvm
  ok

  action "installing lts node..."
  require_nvm --lts
  nvm alias default lts/fermium
  ok

  pushd "$ROOT_DIR" >/dev/null 2>&1

  action "installing npm tools needed to run this project..."
  npm install
  ok

  popd >/dev/null 2>&1

  bot "Woot. All done!. You should run the complementary commands to have your machine fully configured and ready to use:\n"
  echo "$BIN_NAME install hosts"
  echo "$BIN_NAME install prezto"
  echo "$BIN_NAME link (This should be run after prezto)"
  echo "$BIN_NAME install vim"
  echo "$BIN_NAME install fonts"
  echo "$BIN_NAME install packages"
  echo "$BIN_NAME configure defaults"
  echo -e "$BIN_NAME configure dock\n"

  read -r -p "Should i run them for you? [y|N] " response
  if [[ $response =~ (yes|y|Y) ]]; then
    $0 install --all
  fi

  open /Applications/iTerm.app
  killall "Terminal" >/dev/null 2>&1
}

sub_install_all() {
  $0 install --hosts
  $0 install --prezto
  $0 link
  $0 install --vim
  $0 install --fonts
  $0 install --packages
  $0 configure
}

sub_install_passwordless() {
  echo -e "Do you want me to setup this machine to allow you to run sudo without a password?\nPlease read here to see what I am doing:\nhttp://wiki.summercode.com/sudo_without_a_password_in_mac_os_x \n"

  read -r -p "Make sudo passwordless? [y|N] " response

  if [[ $response =~ (yes|y|Y) ]]; then
    if ! grep -q "#includedir /private/etc/sudoers.d" /etc/sudoers; then
      echo '#includedir /private/etc/sudoers.d' | sudo tee -a /etc/sudoers >/dev/null
    fi
    echo -e "Defaults:$LOGNAME    !requiretty\n$LOGNAME ALL=(ALL) NOPASSWD:     ALL" | sudo tee /etc/sudoers.d/$LOGNAME
    bot "You can now run sudo commands without password!"
  fi
}

sub_install_ssh() {
  bot "Setting up SSH\n"

  if [[ -f "$HOME/.ssh/id_ed25519" ]]; then
    read -r -p "Looks like SSH is already configured. Should i generate a new key nontheless? [y|N] " response
  else
    response='yes'
  fi

  if [[ $response =~ (yes|y|Y) ]]; then
    action "Generating a new SSH key"
    read -r -p "Please enter an email to associate your ssh key: " ssh_email
    ssh-keygen -t ed25519 -C $ssh_email -f "$HOME/.ssh/id_ed25519"
    ok

    action "Adding SSH key to SSH Agent"
    eval "$(ssh-agent -s)"
    touch "$HOME/.ssh/config"
    echo "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_ed25519" | tee "$HOME/.ssh/config"
    ssh-add -K "$HOME/.ssh/id_ed25519"
    ok

    echo -e "\nNote: You should add your SSH key to your github account by first running:\n"
    echo -e "pbcopy < ~/.ssh/id_ed25519.pub\n"
    echo -e "Then follow the guide below:\n\nhttps://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account \n"

    read -p "Press [ENTER] to continue... "
  else
    skip
  fi
}

sub_install_prezto() {
  bot "Prezto Setup\n"
  read -r -p "Install prezto zsh? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "installing pretzo-zsh"
    zsh "$ROOT_DIR/scripts/install_prezto.zsh"
    ok
  else
    skip
  fi
}

sub_install_hosts() {
  bot "Hosts file install\n"
  read -r -p "Overwrite /etc/hosts with the ad-blocking hosts file from someonewhocares.org? [y|N] " response
  if [[ $response =~ (yes|y|Y) ]]; then
    action "cp /etc/hosts /etc/hosts.backup"
    sudo cp /etc/hosts /etc/hosts.backup
    ok
    action "cp $ROOT_DIR/system/hosts /etc/hosts"
    sudo cp "$ROOT_DIR/system/hosts" /etc/hosts
    ok
    bot "Your /etc/hosts file has been updated. Last version is saved in /etc/hosts.backup"
  else
    skip
  fi
}

sub_install_fonts() {
  bot "Fonts install\n"
  read -r -p "Install local fonts? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "installing local fonts"
    require_tap homebrew/cask-fonts
    require_brew fontconfig
    "$ROOT_DIR/fonts/install.sh"
    ok
  else
    skip
  fi
}

sub_install_packages() {
  bot "Packages install\n"
  read -r -p "Install packages/tools/apps? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "installing packages from config.js..."
    node "$ROOT_DIR/index.js"
    ok

    action "cleanup homebrew"
    brew cleanup --force >/dev/null 2>&1
    rm -f -r /Library/Caches/Homebrew/* >/dev/null 2>&1
    xattr -d -r com.apple.quarantine "$HOME/Library/QuickLook"
    ok
  else
    skip
  fi
}

sub_install_vim() {
  bot "VIM Setup\n"
  read -r -p "Do you want to install vim plugins? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "Installing vim plugins"
    vim +PluginInstall +qall >/dev/null 2>&1
    ok
  else
    skip
  fi
}

sub_configure() {
  read -r -p "Do you want to update the system configurations? [y|N] " response
  if [[ -z $response || $response =~ ^(y|Y) ]]; then
    echo
    $0 configure --system
    $0 configure --dock
  else
    skip
  fi
}

sub_configure_system() {
  bot "OS Configuration\n"

  shopt -s nullglob

  for DEFAULTS_FILE in $DOTFILES_DIR/macos/defaults*.sh; do
    . "$DEFAULTS_FILE"
  done

  bot "Note: that some of these changes require a logout/restart to take effect."
}

sub_configure_dock() {
  bot "Dock Configuration\n"

  . "$DOTFILES_DIR/macos/dock.sh"

  ok "Dock reloaded!"
}

sub_link() {
  bot "Dotfiles Setup\n"
  read -r -p "symlink ../runcom/* and ../config/* files in ~/ ? [y|N] " response
  if [[ $response =~ (y|yes|Y) ]]; then
    action "creating symlinks for project dotfiles..."
    now=$(date +"%Y.%m.%d.%H.%M.%S")

    pushd "$ROOT_DIR"/runcom >/dev/null 2>&1

    for file in .*; do
      if [[ $file == "." || $file == ".." || $file == '.DS_Store' ]]; then
        continue
      fi

      if [[ -e "$HOME/$file" ]]; then
        running "$HOME/$file"
        mkdir -p "$HOME/.dotfiles_backup/$now"
        mv ~/$file "$HOME/.dotfiles_backup/$now/$file"
        echo "backup saved as $HOME/.dotfiles_backup/$now/$file"
      fi

      unlink ~/$file >/dev/null 2>&1
    done

    popd >/dev/null 2>&1
    pushd "$ROOT_DIR" >/dev/null 2>&1

    [[ -d "$XDG_CONFIG_HOME" ]] || mkdir -p "$XDG_CONFIG_HOME"
    stow -t "$HOME" runcom
    stow -t "$XDG_CONFIG_HOME" config

    popd >/dev/null 2>&1
  else
    skip
  fi
}

sub_unlink() {
  bot "Dotfiles Restore\n"
  if [[ -z $1 ]]; then
    error "you need to specify a backup folder date. Take a look in ~/.dotfiles_backup/ to see which backup date you wish to restore."
    exit 1
  fi

  pushd "$HOME/.dotfiles_backup/$1" >/dev/null 2>&1

  for file in .*; do
    if [[ $file == "." || $file == ".." || $file == '.DS_Store' ]]; then
      continue
    fi

    running "~/$file"
    if [[ -e ~/$file ]]; then
      unlink $file
      echo -en "project dotfile $file unlinked"
      ok
    fi

    if [[ -e ./$file ]]; then
      mv ./$file ./
      echo -en "$1 backup restored"
      ok
    fi
    echo -en '\tdone'
    ok
  done

  popd >/dev/null 2>&1
  pushd "$ROOT_DIR" >/dev/null 2>&1

  stow --delete -t "$HOME" runcom
  stow --delete -t "$XDG_CONFIG_HOME" config

  popd >/dev/null 2>&1
}

sub_update() {
  bot "Updating Dotfiles to latest and greatest!\n"

  pushd "$ROOT_DIR" >/dev/null 2>&1

  running "Enter commit message"
  read message
  echo

  running "Updating submodules"
  git submodule sync --recursive --quiet >/dev/null 2>&1
  git submodule update --init --recursive --quiet >/dev/null 2>&1
  ok

  running "Updating remote repo"
  git add -A >/dev/null 2>&1
  git commit -m "$message" >/dev/null 2>&1
  git push origin main --quiet >/dev/null 2>&1
  ok

  running "Saving date of update"
  git config --global dotfiles.lastupdate "$(date "+%F %T")" >/dev/null 2>&1
  ok

  popd >/dev/null 2>&1

  bot "Woot! All done."
}

sub_update_system() {
  bot "Dedusting this old rusty piece of machinery!"

  action "Updating macOS"
  sudo softwareupdate -i -a

  action "Updating homebrew"
  brew update

  action "Upgrading homebrew packages"
  brew upgrade

  action "Upgrading homebrew casks"
  brew upgrade --cask

  action "Upgrading app store apps"
  mas upgrade

  action "Updating npm"
  source_nvm
  nvm install-latest-npm
  npm update -g

  action "Updating gem"
  sudo gem update --system
  sudo gem update

  bot "Woot! All done. You should clean your system from any leftovers files by running:\n\n"
  echo -e "$BIN_NAME clean\n\n"

  read -r -p "Should i clean them for you? [y|N] " response
  if [[ $response =~ (yes|y|Y) ]]; then
    $0 clean
  fi
}

sub_clean() {
  bot "Polishing this old rusty piece of machinery!\n"
  brew cleanup
  source_nvm
  nvm cache clear
  sudo gem cleanup
  bot "Woot! All done."
}

sub_open() {
  open $DOTFILES_DIR
}

sub_edit() {
  sh -c "$DOTFILES_IDE $DOTFILES_DIR"
}

cmd_error() {
  error "'${COMMAND_NAME}' is not a known command or has errors." >&2
  sub_help
  exit 1
}

subcmd_error() {
  error "${COMMAND_NAME}: '${SUB_COMMAND_NAME}' is not a known command or has errors." >&2
  sub_${COMMAND_NAME}_help
  if [ $? = 127 ]; then
    cmd_error
  fi
  exit 1
}

case $COMMAND_NAME in
"" | "help")
  sub_help
  ;;
"unlink")
  shift
  sub_unlink $@
  ;;
*)
  if [[ -n $SUB_COMMAND_NAME ]]; then
    case $SUB_COMMAND_NAME in
    --${STRIPPED_SUB_COMMAND_NAME})
      sub_${COMMAND_NAME}_${STRIPPED_SUB_COMMAND_NAME}
      if [ $? = 127 ]; then
        subcmd_error
      fi
      ;;
    *)
      subcmd_error
      ;;
    esac
  else
    sub_${COMMAND_NAME}
    if [ $? = 127 ]; then
      cmd_error
    fi
  fi
  ;;
esac
